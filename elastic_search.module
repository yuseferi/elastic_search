<?php

/**
 * @file
 * Contains elastic_search.module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\elastic_search\Elastic\ElasticDocumentManager;
use Drupal\elastic_search\Utility\ElasticTokenHelper;

/**
 * Implements hook_help().
 */
function elastic_search_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the elastic_search module.
    case 'help.page.elastic_search':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Elastic search implementation for drupal 8') .
                 '</p>';
      return $output;

    default:
  }
}

/**
 * Add a link template to each entity type
 * So we can use a Derivative plugin to add tabs to their edit fields
 *
 * Implements hook_entity_type_alter().
 */
function elastic_search_entity_type_alter(array &$entity_types) {

  foreach ($entity_types as $entity_type_id => $entity_type) {
    if (ElasticDocumentManager::isElasticType($entity_type_id)) {
      $entity_type->setLinkTemplate('elastic-mapping-admin',
                                    "/admin/config/search/elastic/fem/{$entity_type_id}__{{$entity_type_id}}/edit");
      continue;
    }
    $entity_type->setLinkTemplate('elastic-mapping-add',
                                  "/admin/config/search/elastic/fem/$entity_type_id/{{$entity_type_id}}");
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 */
function elastic_search_fieldable_entity_map_update(EntityInterface $entity) {
  $manager = \Drupal::getContainer()->get('elastic_search.indices.manager');
  $manager->markIndexForServerUpdateFromFieldMap($entity);
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 */
function elastic_search_fieldable_entity_map_insert(EntityInterface $entity) {
  $manager = \Drupal::getContainer()->get('elastic_search.indices.manager');
  $manager->markIndexForServerUpdateFromFieldMap($entity);
}

/**
 * Implements hook_entity_insert().
 *
 * This does no checking for back references since it stands to reason that a newly created entity should not already
 * be referenced
 * (migration situations can complicate this, YMMV)
 */
function elastic_search_entity_insert(EntityInterface $entity) {
  $dm = \Drupal::getContainer()->get('elastic_search.document.manager');
  $dm->insertAction($entity);
}

/**
 * Implements hook_entity_update().
 *
 * Queues or pushes a document and its back references to elastic
 */
function elastic_search_entity_update(EntityInterface $entity) {
  $dm = \Drupal::getContainer()->get('elastic_search.document.manager');
  $dm->updateAction($entity);
}

/**
 * Implements hook_entity_delete().
 */
function elastic_search_entity_delete(EntityInterface $entity) {
  $dm = \Drupal::getContainer()->get('elastic_search.document.manager');
  $dm->deleteAction($entity);
}

/**
 * Implements hook_token_info().
 */
function elastic_search_token_info() {
  return ElasticTokenHelper::getTokenInfo(\Drupal::getContainer()
                                                 ->get('string_translation'));
}

/**
 * Implements hook_tokens().
 *
 * @param string                                 $type
 * @param array                                  $tokens
 * @param array                                  $data
 * @param array                                  $options
 * @param \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata
 *
 * @return array
 */
function elastic_search_tokens(string $type,
                               array $tokens,
                               array $data,
                               array $options,
                               BubbleableMetadata $bubbleable_metadata) {

  return ElasticTokenHelper::doTokenReplacement($type,
                                                $tokens,
                                                $data,
                                                $options,
                                                $bubbleable_metadata);
}

