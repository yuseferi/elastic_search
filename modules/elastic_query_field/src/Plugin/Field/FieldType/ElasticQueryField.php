<?php

namespace Drupal\elastic_query_field\Plugin\Field\FieldType;

use Drupal\Component\Utility\Random;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FieldItemBase;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\Core\TypedData\DataDefinition;

/**
 * Plugin implementation of the 'elastic_query_field' field type.
 *
 * @FieldType(
 *   id = "elastic_query_field",
 *   label = @Translation("Elastic query field"),
 *   description = @Translation("Field for entering raw elastic dsl queries"),
 *   default_widget = "elastic_query_widget",
 *   default_formatter = "elastic_query_formatter",
 *   category = @Translation("Elastic"),
 * )
 */
class ElasticQueryField extends FieldItemBase {

  /**
   * {@inheritdoc}
   */
  public static function defaultStorageSettings() {
    return [
             'case_sensitive' => FALSE,
           ] + parent::defaultStorageSettings();
  }

  /**
   * @inheritDoc
   */
  public static function defaultFieldSettings() {
    return [
             'validate_query' => FALSE,
           ] +
           parent::defaultFieldSettings(); // TODO: Change the autogenerated stub
  }

  /**
   * @inheritDoc
   */
  public function fieldSettingsForm(array $form,
                                    FormStateInterface $form_state) {
    $form['validate_query'] = [
      '#type'          => 'checkbox',
      '#title'         => $this->t('Validate Query'),
      '#description'   => $this->t('If checked the query dsl will be sent to the server for validation on entity save'),
      '#default_value' => $this->getSetting('validate_query'),
    ];

    return $form;
  }

  /**
   * {@inheritdoc}
   */
  public static function propertyDefinitions(FieldStorageDefinitionInterface $field_definition) {
    // Prevent early t() calls by using the TranslatableMarkup.
    $properties['value'] = DataDefinition::create('string')
                                         ->setLabel(new TranslatableMarkup('Elastic Dsl'))
                                         ->setSetting('case_sensitive',
                                                      $field_definition->getSetting('case_sensitive'))
                                         ->setRequired(TRUE);

    return $properties;
  }

  /**
   * {@inheritdoc}
   */
  public static function schema(FieldStorageDefinitionInterface $field_definition) {
    $schema = [
      'columns' => [
        'value' => [
          'type' => $field_definition->getSetting('case_sensitive') ? 'blob' :
            'text',
          'size' => 'big',
        ],
      ],
    ];

    return $schema;
  }

  /**
   * {@inheritdoc}
   */
  public function getConstraints() {
    $constraints = parent::getConstraints();

    if ($this->getSetting('validate_query')) {
      $constraint_manager = \Drupal::typedDataManager()
                                   ->getValidationConstraintManager();
      $constraints[] = $constraint_manager->create('ComplexData',
                                                   [
                                                     'value' => [
                                                       'ValidDsl' => [],
                                                     ],
                                                   ]);
    }

    return $constraints;
  }

  /**
   * {@inheritdoc}
   */
  public static function generateSampleValue(FieldDefinitionInterface $field_definition) {
    $random = new Random();
    $values['value'] = $random->word(mt_rand(1,
                                             $field_definition->getSetting('max_length')));
    return $values;
  }

  /**
   * {@inheritdoc}
   */
  public function storageSettingsForm(array &$form,
                                      FormStateInterface $form_state,
                                      $has_data) {
    return [];
  }

  /**
   * {@inheritdoc}
   */
  public function isEmpty() {
    $value = $this->get('value')->getValue();
    return $value === NULL || $value === '';
  }

}
